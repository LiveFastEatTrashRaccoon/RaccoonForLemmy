<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>CyclomaticComplexMethod:MultiCommunityScreen.kt$MultiCommunityScreen$@OptIn(ExperimentalMaterial3Api::class, ExperimentalMaterialApi::class) @Composable override fun Content()</ID>
    <ID>CyclomaticComplexMethod:MultiCommunityViewModel.kt$MultiCommunityViewModel$override fun reduce(intent: MultiCommunityMviModel.Intent)</ID>
    <ID>LongMethod:MultiCommunityEditorScreen.kt$MultiCommunityEditorScreen$@OptIn(ExperimentalMaterial3Api::class) @Composable override fun Content()</ID>
    <ID>LongMethod:MultiCommunityScreen.kt$MultiCommunityScreen$@Composable fun List&lt;ActionOnSwipe&gt;.toSwipeActions(): List&lt;SwipeAction&gt;</ID>
    <ID>LongMethod:MultiCommunityScreen.kt$MultiCommunityScreen$@OptIn(ExperimentalMaterial3Api::class, ExperimentalMaterialApi::class) @Composable override fun Content()</ID>
    <ID>LongParameterList:MultiCommunityEditorViewModel.kt$MultiCommunityEditorViewModel$( private val communityId: Long?, private val identityRepository: IdentityRepository, private val communityRepository: CommunityRepository, private val multiCommunityRepository: MultiCommunityRepository, private val accountRepository: AccountRepository, private val settingsRepository: SettingsRepository, private val notificationCenter: NotificationCenter, )</ID>
    <ID>LongParameterList:MultiCommunityViewModel.kt$MultiCommunityViewModel$( private val communityId: Long, private val postRepository: PostRepository, private val identityRepository: IdentityRepository, private val multiCommunityRepository: MultiCommunityRepository, private val siteRepository: SiteRepository, private val themeRepository: ThemeRepository, private val shareHelper: ShareHelper, private val settingsRepository: SettingsRepository, private val notificationCenter: NotificationCenter, private val hapticFeedback: HapticFeedback, private val paginator: MultiCommunityPaginator, private val imagePreloadManager: ImagePreloadManager, private val getSortTypesUseCase: GetSortTypesUseCase, )</ID>
    <ID>MagicNumber:MultiCommunityEditorViewModel.kt$MultiCommunityEditorViewModel$1000</ID>
    <ID>MagicNumber:MultiCommunityScreen.kt$MultiCommunityScreen$5</ID>
    <ID>MaxLineLength:MultiCommunityEditorMviModel.kt$MultiCommunityEditorMviModel$MviModel&lt;MultiCommunityEditorMviModel.Intent, MultiCommunityEditorMviModel.UiState, MultiCommunityEditorMviModel.Effect&gt;</ID>
    <ID>MaxLineLength:MultiCommunityEditorViewModel.kt$MultiCommunityEditorViewModel$DefaultMviModel&lt;MultiCommunityEditorMviModel.Intent, MultiCommunityEditorMviModel.UiState, MultiCommunityEditorMviModel.Effect&gt;</ID>
    <ID>TooGenericExceptionCaught:MultiCommunityViewModel.kt$MultiCommunityViewModel$e: Throwable</ID>
    <ID>TooManyFunctions:MultiCommunityViewModel.kt$MultiCommunityViewModel : MultiCommunityMviModelDefaultMviModel</ID>
  </CurrentIssues>
</SmellBaseline>
