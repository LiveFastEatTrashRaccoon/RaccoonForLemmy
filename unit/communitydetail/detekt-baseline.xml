<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>CyclomaticComplexMethod:CommunityDetailScreen.kt$CommunityDetailScreen$@OptIn(ExperimentalMaterial3Api::class, ExperimentalMaterialApi::class) @Composable override fun Content()</ID>
    <ID>CyclomaticComplexMethod:CommunityDetailViewModel.kt$CommunityDetailViewModel$override fun reduce(intent: CommunityDetailMviModel.Intent)</ID>
    <ID>CyclomaticComplexMethod:CommunityDetailViewModel.kt$CommunityDetailViewModel$private suspend fun loadNextPage()</ID>
    <ID>LargeClass:CommunityDetailScreen.kt$CommunityDetailScreen : Screen</ID>
    <ID>LargeClass:CommunityDetailViewModel.kt$CommunityDetailViewModel : CommunityDetailMviModelDefaultMviModel</ID>
    <ID>LongMethod:CommunityDetailScreen.kt$CommunityDetailScreen$@Composable fun List&lt;ActionOnSwipe&gt;.toSwipeActions(): List&lt;SwipeAction&gt;</ID>
    <ID>LongMethod:CommunityDetailScreen.kt$CommunityDetailScreen$@OptIn(ExperimentalMaterial3Api::class, ExperimentalMaterialApi::class) @Composable override fun Content()</ID>
    <ID>LongMethod:CommunityDetailViewModel.kt$CommunityDetailViewModel$override fun reduce(intent: CommunityDetailMviModel.Intent)</ID>
    <ID>LongMethod:CommunityDetailViewModel.kt$CommunityDetailViewModel$private suspend fun loadNextPage()</ID>
    <ID>LongParameterList:CommunityDetailViewModel.kt$CommunityDetailViewModel$( private val communityId: Long, private val otherInstance: String, private val identityRepository: IdentityRepository, private val apiConfigurationRepository: ApiConfigurationRepository, private val communityRepository: CommunityRepository, private val postRepository: PostRepository, private val siteRepository: SiteRepository, private val themeRepository: ThemeRepository, private val settingsRepository: SettingsRepository, private val accountRepository: AccountRepository, private val favoriteCommunityRepository: FavoriteCommunityRepository, private val shareHelper: ShareHelper, private val hapticFeedback: HapticFeedback, private val zombieModeHelper: ZombieModeHelper, private val imagePreloadManager: ImagePreloadManager, private val getSortTypesUseCase: GetSortTypesUseCase, private val notificationCenter: NotificationCenter, private val itemCache: LemmyItemCache, private val communitySortRepository: CommunitySortRepository, )</ID>
    <ID>MagicNumber:CommunityDetailScreen.kt$CommunityDetailScreen$350</ID>
    <ID>MagicNumber:CommunityDetailScreen.kt$CommunityDetailScreen$5</ID>
    <ID>MagicNumber:CommunityDetailViewModel.kt$CommunityDetailViewModel$1_000</ID>
    <ID>MaxLineLength:CommunityDetailScreen.kt$CommunityDetailScreen$imageVector = if (uiState.searchText.isEmpty()) Icons.Default.Search else Icons.Default.Clear</ID>
    <ID>MaxLineLength:CommunityDetailScreen.kt$CommunityDetailScreen$model.reduce(CommunityDetailMviModel.Intent.ChangeSearching(!uiState.searching))</ID>
    <ID>MaxLineLength:CommunityDetailScreen.kt$CommunityDetailScreen$onDoubleClick</ID>
    <ID>MaxLineLength:CommunityDetailScreen.kt$CommunityDetailScreen$this += "https://${uiState.community.host}/c/${uiState.community.name}"</ID>
    <ID>MaxLineLength:CommunityDetailScreen.kt$CommunityDetailScreen$this += "https://${uiState.instance}/c/${uiState.community.readableHandle}"</ID>
    <ID>TooGenericExceptionCaught:CommunityDetailViewModel.kt$CommunityDetailViewModel$e: Throwable</ID>
    <ID>TooManyFunctions:CommunityDetailViewModel.kt$CommunityDetailViewModel : CommunityDetailMviModelDefaultMviModel</ID>
  </CurrentIssues>
</SmellBaseline>
