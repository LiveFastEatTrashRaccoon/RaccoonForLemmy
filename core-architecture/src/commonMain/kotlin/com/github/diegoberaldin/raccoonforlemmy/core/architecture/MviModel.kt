package com.github.diegoberaldin.raccoonforlemmy.core.architecture

import kotlinx.coroutines.flow.SharedFlow
import kotlinx.coroutines.flow.StateFlow

/**
 * Model contract for Model-View-Intent architecture.
 */
interface MviModel<Intent, State, Effect> {

    /**
     * Representation of the state holder's state for the view to consume.
     */
    val uiState: StateFlow<State>

    /**
     * One-shot events generated by the state holder.
     */
    val effects: SharedFlow<Effect>

    /**
     * Reduce a view intent updating the [uiState] accordingly.
     *
     * @param intent View intent to process
     */
    fun reduce(intent: Intent)

    /**
     * To be called whenever the view component becomes visible to start listening events,
     * initialize the coroutine scope, etc.
     */
    fun onStarted()

    /**
     * To be called wheneer the view component is not visible any more to cancel ongoing operations.
     */
    fun onDisposed()
}
